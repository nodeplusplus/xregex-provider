<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="52" failures="0" time="40.04">
  <testsuite name="Redis.storage" errors="0" failures="0" skipped="0" timestamp="2020-06-27T13:07:05" time="31.168" tests="15">
    <testcase classname="Redis.storage start/stop should start/stop successfully" name="Redis.storage start/stop should start/stop successfully" time="0.032">
    </testcase>
    <testcase classname="Redis.storage serialize should return serialized data if it is defined" name="Redis.storage serialize should return serialized data if it is defined" time="0.003">
    </testcase>
    <testcase classname="Redis.storage serialize should return stringify of null if data is undefined" name="Redis.storage serialize should return stringify of null if data is undefined" time="0">
    </testcase>
    <testcase classname="Redis.storage deserialize should return parsed data successfully" name="Redis.storage deserialize should return parsed data successfully" time="0.002">
    </testcase>
    <testcase classname="Redis.storage deserialize should return null if data was not truthy value" name="Redis.storage deserialize should return null if data was not truthy value" time="0.001">
    </testcase>
    <testcase classname="Redis.storage deserialize should return null if parse was failed" name="Redis.storage deserialize should return null if parse was failed" time="0">
    </testcase>
    <testcase classname="Redis.storage load should load all entities successfully" name="Redis.storage load should load all entities successfully" time="0.003">
    </testcase>
    <testcase classname="Redis.storage lookup should only return entities matched your conditions" name="Redis.storage lookup should only return entities matched your conditions" time="0.309">
    </testcase>
    <testcase classname="Redis.storage lookup should retry by your configs" name="Redis.storage lookup should retry by your configs" time="0.061">
    </testcase>
    <testcase classname="Redis.storage lookup should return entities base on scopes as well" name="Redis.storage lookup should return entities base on scopes as well" time="28.453">
    </testcase>
    <testcase classname="Redis.storage get should return entity successfully" name="Redis.storage get should return entity successfully" time="0.009">
    </testcase>
    <testcase classname="Redis.storage get should return null if id is falsy" name="Redis.storage get should return null if id is falsy" time="0">
    </testcase>
    <testcase classname="Redis.storage get should return null if id is not exist" name="Redis.storage get should return null if id is not exist" time="0.002">
    </testcase>
    <testcase classname="Redis.storage deactivate should remove entity successfully" name="Redis.storage deactivate should remove entity successfully" time="0.004">
    </testcase>
    <testcase classname="Redis.storage deactivate should return do notthing with falsy id" name="Redis.storage deactivate should return do notthing with falsy id" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="XProvider" errors="0" failures="0" skipped="0" timestamp="2020-06-27T13:07:37" time="4.93" tests="8">
    <testcase classname="XProvider start/stop should start/stop successfully" name="XProvider start/stop should start/stop successfully" time="0.059">
    </testcase>
    <testcase classname="XProvider acquire should acquire resource successfully" name="XProvider acquire should acquire resource successfully" time="0.026">
    </testcase>
    <testcase classname="XProvider acquire should acquire resource with scope as well" name="XProvider acquire should acquire resource with scope as well" time="0.018">
    </testcase>
    <testcase classname="XProvider release should release resource successfully" name="XProvider release should release resource successfully" time="0.02">
    </testcase>
    <testcase classname="XProvider release should release resource with scope as well" name="XProvider release should release resource with scope as well" time="0.021">
    </testcase>
    <testcase classname="XProvider deactivate should do notthing if id was not found" name="XProvider deactivate should do notthing if id was not found" time="0.002">
    </testcase>
    <testcase classname="XProvider deactivate should deactivate successfully" name="XProvider deactivate should deactivate successfully" time="0.021">
    </testcase>
    <testcase classname="XProvider clear should clear all items successfully" name="XProvider clear should clear all items successfully" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Redis.quotaManager" errors="0" failures="0" skipped="0" timestamp="2020-06-27T13:07:42" time="0.713" tests="10">
    <testcase classname="Redis.quotaManager start/stop should start/stop successfully" name="Redis.quotaManager start/stop should start/stop successfully" time="0.011">
    </testcase>
    <testcase classname="Redis.quotaManager charge should charge quota point successfully" name="Redis.quotaManager charge should charge quota point successfully" time="0.008">
    </testcase>
    <testcase classname="Redis.quotaManager charge should charge quota with your point as well" name="Redis.quotaManager charge should charge quota with your point as well" time="0.006">
    </testcase>
    <testcase classname="Redis.quotaManager refund should refund quota with your point successfully" name="Redis.quotaManager refund should refund quota with your point successfully" time="0.007">
    </testcase>
    <testcase classname="Redis.quotaManager refund should refund with default quota point as well" name="Redis.quotaManager refund should refund with default quota point as well" time="0.005">
    </testcase>
    <testcase classname="Redis.quotaManager reached should test our id is reached quota configs or not" name="Redis.quotaManager reached should test our id is reached quota configs or not" time="0.007">
    </testcase>
    <testcase classname="Redis.quotaManager get should get zero if quota point was not set" name="Redis.quotaManager get should get zero if quota point was not set" time="0.002">
    </testcase>
    <testcase classname="Redis.quotaManager get should get current quota point" name="Redis.quotaManager get should get current quota point" time="0.007">
    </testcase>
    <testcase classname="Redis.quotaManager getQuota should return default quota configs if key was not match any configs" name="Redis.quotaManager getQuota should return default quota configs if key was not match any configs" time="0.009">
    </testcase>
    <testcase classname="Redis.quotaManager getQuota should return matched quota configs" name="Redis.quotaManager getQuota should return matched quota configs" time="0">
    </testcase>
  </testsuite>
  <testsuite name="MongoDB.datasources" errors="0" failures="0" skipped="0" timestamp="2020-06-27T13:07:42" time="0.762" tests="4">
    <testcase classname="MongoDB.datasources start/stop should start/stop successfully" name="MongoDB.datasources start/stop should start/stop successfully" time="0.023">
    </testcase>
    <testcase classname="MongoDB.datasources feed should return all matched records" name="MongoDB.datasources feed should return all matched records" time="0.007">
    </testcase>
    <testcase classname="MongoDB.datasources deactivate should do notthing with invalid record" name="MongoDB.datasources deactivate should do notthing with invalid record" time="0.016">
    </testcase>
    <testcase classname="MongoDB.datasources deactivate should deactivate record successfully" name="MongoDB.datasources deactivate should deactivate record successfully" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="Redis.rotation" errors="0" failures="0" skipped="0" timestamp="2020-06-27T13:07:43" time="0.786" tests="7">
    <testcase classname="Redis.rotation start/stop should start/stop successfully" name="Redis.rotation start/stop should start/stop successfully" time="0.015">
    </testcase>
    <testcase classname="Redis.rotation add should return false if item was empty array" name="Redis.rotation add should return false if item was empty array" time="0.001">
    </testcase>
    <testcase classname="Redis.rotation add should only return true if add was succesfull and not expired" name="Redis.rotation add should only return true if add was succesfull and not expired" time="0.004">
    </testcase>
    <testcase classname="Redis.rotation includes should return false if item was empty array" name="Redis.rotation includes should return false if item was empty array" time="0">
    </testcase>
    <testcase classname="Redis.rotation includes should only return true if every items are belong to colelction" name="Redis.rotation includes should only return true if every items are belong to colelction" time="0.007">
    </testcase>
    <testcase classname="Redis.rotation find should return false if item was empty array" name="Redis.rotation find should return false if item was empty array" time="0.001">
    </testcase>
    <testcase classname="Redis.rotation find should only return true if every items are belong to colelction" name="Redis.rotation find should only return true if every items are belong to colelction" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="File.datasources" errors="0" failures="0" skipped="0" timestamp="2020-06-27T13:07:44" time="0.569" tests="5">
    <testcase classname="File.datasources start/stop should start/stop successfully" name="File.datasources start/stop should start/stop successfully" time="0.004">
    </testcase>
    <testcase classname="File.datasources start/stop should throw error if file is not found" name="File.datasources start/stop should throw error if file is not found" time="0.003">
    </testcase>
    <testcase classname="File.datasources start/stop should throw error if file content is not a array" name="File.datasources start/stop should throw error if file content is not a array" time="0.001">
    </testcase>
    <testcase classname="File.datasources feed should return all matched records" name="File.datasources feed should return all matched records" time="0.001">
    </testcase>
    <testcase classname="File.datasources deactivate should do nothing with deactivated record" name="File.datasources deactivate should do nothing with deactivated record" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Template" errors="0" failures="0" skipped="0" timestamp="2020-06-27T13:07:44" time="0.363" tests="2">
    <testcase classname="Template should return empty array if template have no errors" name="Template should return empty array if template have no errors" time="0.018">
    </testcase>
    <testcase classname="Template should return empty array if template have no errors" name="Template should return empty array if template have no errors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Builder" errors="0" failures="0" skipped="0" timestamp="2020-06-27T13:07:45" time="0.303" tests="1">
    <testcase classname="Builder should only bind defined components" name="Builder should only bind defined components" time="0.005">
    </testcase>
  </testsuite>
</testsuites>